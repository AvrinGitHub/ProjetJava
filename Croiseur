/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetjava;

import java.util.Scanner;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Admin
 */
    public class Croiseur extends Navire {

    public static boolean detecterSiOk(int i, int j , int orientation , int typeBateau , int ligneTab , int[][] coordonnee){// ligneTab pour savoir quelle ligne modifier dans coordonnee apres 
        
        for (int z=0 ; z<10 ; z++ ){
            if (coordonnee[z][0]==i && coordonnee[z][1]== j && coordonnee[z][2]==orientation && coordonnee[z][3]==typeBateau && coordonnee[z][4]==1){
               ligneTab=z;
               return true;
            }
        }
        return false;     
    }
        
    public void choixSens(String [][] tableAllie, String[][] tableAllieTir, String[][] tableIa, String[][] tableIaTir, int i, int j , int tourJoueur, int[][] coordonneBateauAllie , int[][] coordonneBateauIa) throws IOException {
        int nombreChoix = 0;
        int orientation = 0;
        int itemp=i;
        int jtemp=j;
        boolean test = false; 
        int ligneTab=0; 
        if (tourJoueur%2==0){
            System.out.println("Dans quel sens est oriente le croiseur ? 1 H 2 V");
            orientation = new Scanner(System.in).nextInt();
            test=detecterSiOk( i , j , orientation , 3 , ligneTab , coordonneBateauAllie);
        }
        if (tourJoueur%2==1){
            int max = 2;
            int min = 1;
            orientation = (int)(Math.random()* (max - min + min) + min);
            test=detecterSiOk( i , j , orientation , 3 , ligneTab , coordonneBateauIa);
        }
        
        
        //Horizontal
            if((test==true)&&(orientation==1)){
                if (tourJoueur%2==0){
                    System.out.println("Dans quel sens souhaitez-vous déplacer le croiseur ?");
                    System.out.println(" Selectionner 1 ou 2. \n 1: Deplacer vers la droite \n 2. Deplacer vers la gauche\n ");
                    nombreChoix = new Scanner(System.in).nextInt();
                }
                if (tourJoueur%2==1){
                    int max = 2;
                    int min = 1;
                    nombreChoix = (int)(Math.random()* (max - min + min) + min);
                }
                
                switch( nombreChoix ) {

                    case 1: 
                        if (tourJoueur%2==0 && j+4!=14 && tableAllie[i][j+5].equals("  ")){
                            tableAllie[i][j]="  ";
                            tableAllie[i][j+5]="oo";
                            coordonneBateauAllie[ligneTab][1]= j+1;              
                        }
                        if (tourJoueur%2==1 && j+4!=14 && tableIa[i][j+5].equals("  ")){
                            tableIa[i][j]="  ";
                            tableIa[i][j+5]="oo";
                            coordonneBateauIa[ligneTab][1]= j+1;
                        }
                        else{
                            if (tourJoueur%2==0){
                                System.out.println("Deplacement impossible.");
                                System.out.println("Veuillez choisir une nouvelle action.");
                                MenuDuJeu.menuDuTour(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                            }
                            if (tourJoueur%2==1){
                                MenuDuJeu.menuDuTourIa(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                            }
                        }
                        break;
                    
                    case 2:
                        if (tourJoueur%2==0 && j!=0 && tableAllie[i][j-1].equals("  ")){
                            tableAllie[i][j-1]="oo";
                            tableAllie[i][j+4]="  ";
                            coordonneBateauAllie[ligneTab][1]= j-1;              
                        }
                        if (tourJoueur%2==1 && j!=0 && tableIa[i][j-1].equals("  ")){
                            tableIa[i][j-1]="oo";
                            tableIa[i][j+4]="  ";
                            coordonneBateauIa[ligneTab][1]= j-1;
                        }
                        else{
                            if (tourJoueur%2==0){
                                System.out.println("Deplacement impossible.");
                                System.out.println("Veuillez choisir une nouvelle action.");
                                MenuDuJeu.menuDuTour(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                            }
                            if (tourJoueur%2==1){
                                MenuDuJeu.menuDuTourIa(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                            }
                        }
                        break;
                    default:
                        if (tourJoueur%2==0){
                            System.out.println( "Entre 1 et 2 svp" );
                            MenuDuJeu.menuDuTour(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                        }
                        if (tourJoueur%2==1){
                            MenuDuJeu.menuDuTourIa(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                        }
                    }
                
        
        //Vertical
            if( test==true && orientation==2){
                if (tourJoueur%2==0){
                    System.out.println("Dans quel sens souhaitez-vous déplacer le destroyer ?");
                    System.out.println(" Selectionner 1 ou 2. \n 1: Deplacer vers le haut \n 2. Deplacer vers le bas \n");
                    nombreChoix = new Scanner(System.in).nextInt();
                }
                if (tourJoueur%2==1){
                    int max = 2;
                    int min = 1;
                    nombreChoix = (int)(Math.random()* (max - min + min) + min);
                }
                
                switch( nombreChoix ) {
                    case 1: 
                        if (tourJoueur%2==0 && i!=0 && tableAllie[i-1][j].equals("  ")){
                            tableAllie[i-1][j]="oo";
                            tableAllie[i+4][j]="  ";
                            coordonneBateauAllie[ligneTab][0]= i-1;              
                        }
                        if (tourJoueur%2==1 && i!=0 && tableIa[i-1][j].equals("  ")){
                            tableIa[i-1][j]="oo";
                            tableIa[i+4][j]="  ";
                            coordonneBateauIa[ligneTab][0]= i-1;
                        }
                            
                        else{
                            if (tourJoueur%2==0){
                                System.out.println("Deplacement impossible.");
                                System.out.println("Veuillez choisir une nouvelle action.");
                                MenuDuJeu.menuDuTour(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                            }
                            if (tourJoueur%2==1){
                                MenuDuJeu.menuDuTourIa(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                            }
                        }
                        break;
            
                    case 2:                           
                        if (tourJoueur%2==0 && i+4!=14 && tableAllie[i+5][j].equals("  ")){
                            tableAllie[i+5][j]="oo";
                            tableAllie[i][j]="  ";
                            coordonneBateauAllie[ligneTab][0]= i+1;              
                        }
                        if (tourJoueur%2==1 && i+4!=14 && tableIa[i+5][j].equals("  ")){
                            tableIa[i+5][j]="oo";
                            tableIa[i][j]="  ";
                            coordonneBateauIa[ligneTab][0]= i+1;
                        }
                            
                        else{
                            if (tourJoueur%2==0){
                                System.out.println("Deplacement impossible.");
                                System.out.println("Veuillez choisir une nouvelle action.");
                                MenuDuJeu.menuDuTour(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                            }
                            if (tourJoueur%2==1){
                                MenuDuJeu.menuDuTourIa(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                            }
                        }
                        break;
                    
                    default:
                        if (tourJoueur%2==0){
                            System.out.println( "Entre 1 et 2 svp" );
                            MenuDuJeu.menuDuTour(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                        }
                        if (tourJoueur%2==1){
                            MenuDuJeu.menuDuTourIa(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                        }
                }
            }
            else{
                if (tourJoueur%2==0){
                    System.out.println("Selection impossible.");
                    MenuDuJeu.menuDuTour(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                }
                if (tourJoueur%2==1){
                    MenuDuJeu.menuDuTourIa(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                }
            
            }
    }

    
    }

    @Override
    public void Tir(String[][] GrilleAdv, String[][] GrilleTir) {
        Scanner choixCase = new Scanner(System.in);
        int caseTiri, caseTirj;
        System.out.println("Selectionnez la case sur laquelle vous souhaitez tirer :");
        System.out.print("Ligne : ");
        caseTiri = choixCase.nextInt();
        System.out.println("");
        System.out.print("Colonne : ");
        caseTirj = choixCase.nextInt();
        System.out.println(""); 
        if(caseTiri>=0 && caseTiri<15 && caseTirj>=0 && caseTirj<15){
            if(GrilleAdv[caseTiri][caseTirj].equals("  ") || GrilleAdv[caseTiri][caseTirj].equals("SS")){
                System.out.println("Le tir a echoue. Vous n'avez rien touche.");
            }
            else{
                System.out.println("Touche !");
                GrilleTir[caseTiri][caseTirj]="XX";
                GrilleAdv[caseTiri][caseTirj]="XX";
                for(int k=0; k<2; k++){
                    for(int q=0; q<2; q++){
                        if(GrilleAdv[caseTiri+k][caseTirj+q].equals("  ") || GrilleAdv[caseTiri+k][caseTirj+q].equals("SS") || GrilleTir[caseTiri+k][caseTirj+q].equals("XX")){
                        }
                        else{
                            System.out.println("Degats collateraux !");
                            GrilleTir[caseTiri+k][caseTirj+q] = "XX";
                            GrilleAdv[caseTiri+k][caseTirj+q] = "XX";
                        }
                    }
                }
            }
        }
        else{
             if (tourJoueur%2==0){
                            MenuDuJeu.menuDuTour(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                        }
                if (tourJoueur%2==1){
                            MenuDuJeu.menuDuTourIa(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                        }
        }
    }

    @Override
    public void Deplacement(String[][] tableAllie, String[][] tableAllieTir, String[][] tableIa, String[][] tableIaTir, String croiseur, int i, int j, int tourJoueur, int[][] coordonneBateauAllie, int[][] coordonneBateauIa) {
         if (croiseur.equals("oo")){
             try {         
                 choixSens(tableAllie, tableAllieTir, tableIa, tableIaTir , i, j , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
             } catch (IOException ex) {
                 Logger.getLogger(Croiseur.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
        else{
            if (tourJoueur%2==0){
                System.out.println("Selection impossible");
                System.out.println("Recommencez");
                try {
                    MenuDuJeu.menuDuTour(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                } catch (IOException ex) {
                    Logger.getLogger(Croiseur.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (tourJoueur%2==1){
                try {
                    MenuDuJeu.menuDuTourIa(tableAllie, tableAllieTir, tableIa, tableIaTir , tourJoueur , coordonneBateauAllie , coordonneBateauIa);
                } catch (IOException ex) {
                    Logger.getLogger(Croiseur.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }  

}

